#include<stdlib.h>
#include<stdio.h>
#include<string.h>
EXEC SQL INCLUDE SQLCA;

#define MAXLEN 20
void get_string(char *s, int maxlen){
    fgets(s,maxlen,stdin);
    int last = strlen(s) -1;
    if ( (s[last]=='\r') || (s[last]=='\n') )
        s[last] = '\0';
}

void get_password(char *s, int maxlen){
    system("stty -echo");
    get_string(s,maxlen);
    system("stty echo");
}

int get_int(){
    char s[MAXLEN];
    get_string(s,MAXLEN);
    return atoi(s);
}

float get_float(){
    char s[MAXLEN];
    get_string(s,MAXLEN);
    return atof(s);
}

int menu()
{
    int opcion = -1;

    int MAXOPTS = 15;
    printf("\n"); 
    printf(" ---------------------------------\n");
    printf("|          MENU POKEMON           |\n");
    printf(" ---------------------------------\n");
    printf("| 1. Insertar Pokemon             |\n");
    printf("| 2. Insertar ataque              |\n");
    printf("| 3. Eliminar Pokemon             |\n");
    printf("| 4. Eliminar ataque              |\n");
    printf("| 5. Buscar Pokemon               |\n");
    printf("| 6. Buscar Pokemon por tipo      |\n");
    printf("| 7. Actualizar PP                |\n");
    printf("| 8. Aumentar porcentaje ATK      |\n");
    printf("| 9. Intercambiar estadisticas    |\n");
    printf(" ---------------------------------\n");
    printf("| 0. Salir                        |\n");
    printf(" ---------------------------------\n");
    while ( (opcion < 0) || (opcion > MAXOPTS)){
        printf("OP> ");
        opcion=get_int();
    }
    return opcion;
}

void gestionar_error(){
    switch(sqlca.sqlcode){
        case -1017:
        case -1005:
            printf("No se pudo conectar con Oracle\n");
            exit(-1);
        case -1012:
            printf("No se puede desconectar, usuario no conectado");
            break;
        default:
            printf("Error %d: %.*s\n", sqlca.sqlcode,
            sqlca.sqlerrm.sqlerrml,
            sqlca.sqlerrm.sqlerrmc);
    }
}

int gestionar_errordml(int do_rollback, char *tabla){
    exec sql whenever sqlerror continue;
    int cod = sqlca.sqlcode;
    switch(cod){
        case -1:
            printf("\nYa existe una fila con ese código de Pókemon en la tabla  %s\n", tabla);
            break;
        case -2291:
            printf("\nAlguno de los valores introducidos es NULL y ese campo no admite nulos en la tabla %s\n", tabla);
            break;
        case -2292:
            printf("\nEse ataque no se puede eliminar porque está asignado a un Pokemon\n");
            break;
        default: 
            printf("\nError %d: %.*s\n", sqlca.sqlcode,
            sqlca.sqlerrm.sqlerrml,
            sqlca.sqlerrm.sqlerrmc);
    }
    if (do_rollback){
        exec sql rollback;
    }
    return cod;
}

void insertar_pokemon(){
    int error = 0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql begin declare section;
    int codigo_pok;
    char nombre_pok[20];
    int hp, atk, def, spe;
    int codigo_ata, codigo_tipo, codigo_hab;
    exec sql end declare section;

    printf("Código del Pokémon: "); codigo_pok = get_int();
    printf("Nombre del Pokémon: "); get_string(nombre_pok, 19);
    printf("HP: "); hp = get_int();
    printf("ATK: "); atk = get_int();
    printf("DEF: "); def = get_int();
    printf("SPE: "); spe = get_int();
    printf("Código del ataque: "); codigo_ata = get_int();
    printf("Código del tipo: "); codigo_tipo = get_int();
    printf("Código de la habilidad: "); codigo_hab = get_int();

    EXEC SQL INSERT INTO POKEMON
            VALUES(:codigo_pok, :nombre_pok, :hp, :atk, :def, :spe, :codigo_ata, :codigo_tipo, :codigo_hab);
    if(!error){
            exec sql commit;
            printf("\nPokémon añadido\n");
    }

}

void insertar_ataque(){
    int error = 0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "ATAQUE");

    exec sql begin declare section;
    int codigo_ata;
    char nombre_ata[20];
    int pp, potencia, precision;
    int codigo_tipo;
    short potencia_ind = 0;
    short precision_ind = 0;
    exec sql end declare section;

    printf("Código del ataque: "); codigo_ata = get_int();
    printf("Nombre del ataque: "); get_string(nombre_ata, 19);
    printf("PP: "); pp = get_int();
    printf("Potencia: "); potencia = get_int();
    printf("Precisión: "); precision = get_int();
    printf("Código del tipo: "); codigo_tipo = get_int();

    EXEC SQL INSERT INTO ATAQUE
            VALUES(:codigo_ata, :nombre_ata, :pp, :potencia:potencia_ind,
             :precision:precision_ind, :codigo_tipo);
    if(!error){
            exec sql commit;
            printf("\nAtaque añadido\n");
    }

}

void eliminar_pokemon(){
    int error = 0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql begin declare section;
    int codigo_pok;
    exec sql end declare section;

    printf("Borrar Pokemon que tenga el codigo: "); codigo_pok = get_int();

    EXEC SQL DELETE FROM POKEMON
        WHERE IDP = :codigo_pok;

    if(sqlca.sqlerrd[2] == 0 && !error){
        printf("\nEl Pokemon con ese ID no existe\n");
        exec sql commit;
    }else if(!error){
        printf("\nPokemon borrado\n");
        exec sql commit;
    }


}

void eliminar_ataque(){
    int error = 0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "ATAQUE");

    exec sql begin declare section;
    int codigo_ata;
    exec sql end declare section;

    printf("Borrar ataque que tenga el codigo: "); codigo_ata = get_int();

    EXEC SQL DELETE FROM ATAQUE
            WHERE IDA = :codigo_ata;

    if (!error){
        if(sqlca.sqlerrd[2] == 0)
            printf("\nEl ataque con ese ID no existe\n");
        else 
            printf("\nAtaque borrado\n");
        exec sql commit;
    }
    

}

void buscar_pokemon(){
    int error = 0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql SET TRANSACTION READ ONLY;

    exec sql begin declare section;
    int codigo_pok;
    char nombre_pok[20], nombre_ata[20], nombre_tipo[20];
    int hp, atk, def, spe;
    exec sql end declare section;

    printf("Codigo del Pokemon: "); codigo_pok = get_int();

    EXEC SQL SELECT nombrep, hp, atk, def, spe, nombrea, nombret
            INTO :nombre_pok, :hp, :atk, :def, :spe, :nombre_ata, :nombre_tipo
            FROM pokemon  p JOIN ataque a 
            ON p.ida = a.ida
            JOIN tipo t 
            ON p.idt = t.idt 
            WHERE idp = :codigo_pok;

    if(!error){
            if(sqlca.sqlcode==1403)
                    printf("\nPokemon inexistente\n");
            else{
                printf("\nPokemon: ID: %d, %s, HP: %d, ATK: %d, DEF: %d, SPE: %d, ATAQUE: %s, Tipo: %s\n",
                 codigo_pok, nombre_pok, hp, atk, def, spe, nombre_ata, nombre_tipo);
            }
            exec sql commit;
    }

}

void buscar_pokemon_por_tipo(){
    int error=0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql SET TRANSACTION READ ONLY;

    exec sql begin declare section;
    int codigo_pok, codigo_tipo;
    char nombre_pok[20], nombre_tipo[20];
    int hp, atk, def, spe;
    exec sql end declare section;

    exec sql declare c_pok cursor for
            select idp, nombrep, hp, atk, def, spe, t.nombret
                from pokemon p join tipo t
                on p.idt = t.idt
                where p.idt = :codigo_tipo;

    printf("Introduce el código del tipo de Pokemon que quieres buscar: "); codigo_tipo=get_int();

    EXEC SQL OPEN c_pok;
    EXEC SQL WHENEVER NOT FOUND DO BREAK;
    printf("\n\n");
    while(1){
            EXEC SQL FETCH c_pok INTO :codigo_pok, :nombre_pok, :hp, :atk, :def, :spe, :nombre_tipo;
            printf("POKEMON: \tCodigo Pokemon: %4d\tNombre: %20s\tHP: %4d\tATK: %4d\tDEF: %4d\tSPE: %4d\tTipo: %10s\n",
             codigo_pok, nombre_pok, hp, atk, def, spe, nombre_tipo);
    }
    EXEC SQL WHENEVER NOT FOUND continue;
        printf("\nPokemon encontrados: %d\n", sqlca.sqlerrd[2]);
    EXEC SQL CLOSE c_pok;
    if (!error)
            EXEC SQL COMMIT;
}

void actualizar_pp(){
    int error=0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql begin declare section;
    int new_pp;
    int codigo_ata;
    exec sql end declare section;

    printf("Introduce el código del ataque: "); codigo_ata=get_int();
    printf("Introduce el nuevo valor para los PP: "); new_pp=get_int();

    exec sql update ataque
        set pp = :new_pp
        where ida = :codigo_ata;

    if(!error){
        if(sqlca.sqlerrd[2])
            printf("\nPP del ataque modificado\n");
        else
            printf("\nAtaque no encontrado\n");
        exec sql commit;
    }
}

void aumentar_porcentaje_atk(){
    int error=0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql begin declare section;
    int porcentaje;
    int codigo_pok;
    exec sql end declare section;

    printf("Introduce el código del Pokemon: "); codigo_pok=get_int();
    printf("Introduce el porcentaje que quieres incrementar el ATK: "); porcentaje=get_int();

    exec sql update pokemon
            set atk = atk + atk*:porcentaje/100
            where idp = :codigo_pok;

    if(!error){
        if(sqlca.sqlerrd[2])
            printf("\nATK del Pokemon modificado\n");
        else
            printf("\nPokemon no encontrado\n");
        exec sql commit;
   }

}

void intercambiar_estadisticas(){
    int error=0;
    exec sql whenever sqlerror do error=gestionar_errordml(1, "POKEMON");

    exec sql begin declare section;
    int codigo_pok1, codigo_pok2;
    int hp1, hp2, atk1, atk2, def1, def2, spe1, spe2;
    exec sql end declare section;

    printf("Introduce el código del Pokemon 1 para intercambiar estadisticas: "); codigo_pok1=get_int();
    printf("Introduce el código del Pokemon 2 para intercambiar estadisticas: "); codigo_pok2=get_int();

    EXEC SQL SELECT hp, atk, def, spe
            INTO :hp1, :atk1, :def1, :spe1
            FROM pokemon
            WHERE idp = :codigo_pok1;

    EXEC SQL SELECT hp, atk, def, spe
            INTO :hp2, :atk2, :def2, :spe2
            FROM pokemon
            WHERE idp = :codigo_pok2;

    exec sql update pokemon
            set hp = :hp2, atk = :atk2, def = :def2, spe = :spe2
            where idp = :codigo_pok1;

    printf("Introduce el código del Pokemon 1 para intercambiar estadisticas: "); codigo_pok1=get_int();

    exec sql update pokemon
            set hp = :hp1, atk = :atk1, def = :def1, spe = :spe1
            where idp = :codigo_pok2;

    if(!error){
        if(sqlca.sqlerrd[2])
            printf("\nEstadísticas de los Pokemon se han intercambiado\n");
        else
            printf("\nAlgún Pokemon no se ha encontrado\n");
        exec sql commit;
   }
}

void conecta_bd(){
    exec sql whenever sqlerror do gestionar_error();
    exec sql begin declare section;
    char usuario[30], clave[30];
    exec sql end declare section;

    printf("Conectando con Oracle...\n");
    printf("Usuario: "); get_string(usuario, 29);
    printf("Contraseña: "); get_password(clave, 29);

    EXEC SQL CONNECT :usuario IDENTIFIED BY :clave;
}

void desconecta_bd(){
    exec sql whenever sqlerror do gestionar_error();
    EXEC SQL COMMIT RELEASE;
    printf("Desconectado.\n");
}

int main()
{
    conecta_bd();

    int op;

    while ( (op=menu()) != 0){
        switch(op){
            case 1: insertar_pokemon(); break;
            case 2: insertar_ataque(); break;
            case 3: eliminar_pokemon(); break;
            case 4: eliminar_ataque(); break; 
            case 5: buscar_pokemon(); break;
            case 6: buscar_pokemon_por_tipo(); break;
            case 7: actualizar_pp(); break;
            case 8: aumentar_porcentaje_atk(); break;
            case 9: intercambiar_estadisticas(); break;
        }

    }
    desconecta_bd();

    return 0;
}

